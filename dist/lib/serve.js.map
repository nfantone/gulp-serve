{"version":3,"sources":["lib/serve.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;2BACF,cAAc;;;;2BACV,cAAc;;;;mCACpB,uBAAuB;;;;oBACxB,MAAM;;;;IAEjB,UAAU;AACH,WADP,UAAU,GACW;QAAb,MAAM,yDAAG,EAAE;;0BADnB,UAAU;;AAEZ,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,WAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,GAAG,CAAC;GAChD;;eAJG,UAAU;;;;;;WASR,iBAAC,EAAE,EAAE;AACT,UAAI,EAAE,GAAG,yBAAY,MAAM,EAAE,CAAC;AAC9B,UAAI,OAAO,GAAG,EAAE,CAAC;;;;;;AACjB,6BAAc,IAAI,CAAC,MAAM,CAAC,OAAO,8HAAE;cAA1B,CAAC;;AACR,iBAAO,CAAC,IAAI,CAAC,sCAAM,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;SACnC;;;;;;;;;;;;;;;;AACD,UAAI,OAAO,GAAG,oBAAE,QAAQ,CAAC;AACvB,kBAAU,EAAE,OAAO;AACnB,gBAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,GAAG,MAAM;OACjD,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;;;;;;;AAGnB,8BAAc,IAAI,CAAC,MAAM,CAAC,OAAO,mIAAE;cAA1B,CAAC;;AACR,4BAAK,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,kBAAK,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;SAC3D;;;;;;;;;;;;;;;;AAED,QAAE,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KACtB;;;;;;;WAKK,gBAAC,EAAE,EAAE;AACT,UAAI,OAAO,GAAG,oBAAE,QAAQ,CAAC;AACvB,eAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;AAC5B,WAAG,EAAE;AACH,oBAAU,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG;SAC5B;OACF,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACxB,oCAAQ,OAAO,CAAC,CAAC;AACjB,QAAE,EAAE,CAAC;KACN;;;WAEI,eAAC,EAAE,EAAE;AACR,UAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AACtB,YAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;OACjB,MAAM;AACL,YAAI,UAAO,CAAC,EAAE,CAAC,CAAC;OACjB;KACF;;;SAhDG,UAAU;;;qBAoDD,UAAU","file":"lib/serve.js","sourcesContent":["import _ from 'lodash';\nimport nodemon from 'gulp-nodemon';\nimport browserSync from 'browser-sync';\nimport proxy from 'http-proxy-middleware';\nimport gulp from 'gulp';\n\nclass GulpServer {\n  constructor(config = {}) {\n    this.config = config;\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n  }\n\n  /**\n   * Configures and initializes a static BrowserSync HTTP server.\n   */\n  static(cb) {\n    let bs = browserSync.create();\n    let proxies = [];\n    for (let p of this.config.proxies) {\n      proxies.push(proxy(p.context, p));\n    }\n    let options = _.defaults({\n      middleware: proxies,\n      logLevel: this.config.verbose ? 'debug' : 'info'\n    }, this.config.bs);\n\n    // Register watches\n    for (let w of this.config.watches) {\n      gulp.watch(w.glob, gulp.series(w.tasks || [], bs.reload));\n    }\n\n    bs.init(options, cb);\n  }\n\n  /**\n   * Configures and starts a nodemon daemon.\n   */\n  daemon(cb) {\n    let options = _.defaults({\n      verbose: this.config.verbose,\n      env: {\n        'NODE_ENV': this.config.env\n      }\n    }, this.config.nodemon);\n    nodemon(options);\n    cb();\n  }\n\n  serve(cb) {\n    if (this.config.daemon) {\n      this.daemon(cb);\n    } else {\n      this.static(cb);\n    }\n  }\n\n}\n\nexport default GulpServer;\n"],"sourceRoot":"/home/nfantone/dev/js/gulp-serve"}